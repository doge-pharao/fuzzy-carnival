=============================================================================
List of generated methods in project: sender_can_uart_KE06

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "Pins1"     (component PinSettings)

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU1_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - TU1_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.

Module "REDLED"    (component BitIO_LDD)
   - REDLED_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - REDLED_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - REDLED_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - REDLED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - REDLED_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for limitations). If 
                the direction is <b>output</b>, it writes the value to the pin. (Method is available only if the direction = 
                <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - REDLED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - REDLED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - REDLED_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "GREENLED"  (component BitIO_LDD)
   - GREENLED_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.
   - GREENLED_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - GREENLED_SetInput -Sets a pin direction to input (available only if the direction = _[input/output]_).
   - GREENLED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is read and returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - GREENLED_PutVal -The specified output value is set. If the direction is <b>input</b>, the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                <tt>SetDir(TRUE)</tt>; see <a href="BitIOProperties.html#SafeMode">Safe mode</a> property for limitations). If 
                the direction is <b>output</b>, it writes the value to the pin. (Method is available only if the direction = 
                <u><tt>output</tt></u> or <u><tt>input/output</tt></u>).
   - GREENLED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - GREENLED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - GREENLED_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "AS1"       (component Serial_LDD)
   - AS1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - AS1_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled. This method finishes immediately after calling it - it 
                doesn't wait the end of data transmission. Use event <OnBlockSent> to check the end of data transmission or 
                method GetSentDataNum to check the state of sending.
   - AS1_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number of 
                characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation. If a 
                receive operation is not in progress (the method was not called or a previous operation has already finished) 
                all received characters will be lost without any notification. To prevent the loss of data call the method 
                immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> event). This method 
                finishes immediately after calling it - it doesn't wait the end of data reception. Use event <OnBlockReceived> 
                to check the end of data reception or method GetReceivedDataNum to check the state of receiving.

Module "UART_RxBuff" (component RingBuffer)
   - UART_RxBuff_Clear -Clear (empty) the ring buffer.
   - UART_RxBuff_Put -Puts a new element into the buffer
   - UART_RxBuff_Putn -Put a number new element into the buffer.
   - UART_RxBuff_Get -Removes an element from the buffer
   - UART_RxBuff_Peek -Returns an element of the buffer without removiing it.
   - UART_RxBuff_Compare -Compares the elements in the buffer.
   - UART_RxBuff_Delete -Removes an element from the buffer
   - UART_RxBuff_NofElements -Returns the actual number of elements in the buffer.
   - UART_RxBuff_NofFreeElements -Returns the actual number of free elements/space in the buffer.
   - UART_RxBuff_Deinit -Driver de-initialization
   - UART_RxBuff_Init -Initializes the data structure

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section

Module "KSDK1"     (component KinetisSDK)

Module "CAN1"      (component CAN_LDD)
   - CAN1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - CAN1_SetRxIDFilterTable -Sets the receive ID filter table element specified by the parameter ElementIdx. This method is 
                available only if receiver FIFO mode is enabled.
   - CAN1_SendFrame -Sends a frame via the CAN device. This method allow to specify CAN buffer number, message ID, data to be 
                sent, frame type and whether the message will be sent after the request comes.
   - CAN1_ReadFrame -Reads a frame from the CAN device. The user is informed about CAN reception through OnFullRxBuffer event 
                or GetStateRX method.

Module "CAN_RxBuff" (component RingBuffer)
   - CAN_RxBuff_Clear -Clear (empty) the ring buffer.
   - CAN_RxBuff_Put -Puts a new element into the buffer
   - CAN_RxBuff_Putn -Put a number new element into the buffer.
   - CAN_RxBuff_Get -Removes an element from the buffer
   - CAN_RxBuff_Peek -Returns an element of the buffer without removiing it.
   - CAN_RxBuff_Compare -Compares the elements in the buffer.
   - CAN_RxBuff_Delete -Removes an element from the buffer
   - CAN_RxBuff_NofElements -Returns the actual number of elements in the buffer.
   - CAN_RxBuff_NofFreeElements -Returns the actual number of free elements/space in the buffer.
   - CAN_RxBuff_Deinit -Driver de-initialization
   - CAN_RxBuff_Init -Initializes the data structure

Module "CS2"       (component CriticalSection)
   - CS2_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS2_EnterCritical -Enters a critical section
   - CS2_ExitCritical -Exits a critical section

Module "WAIT1"     (component WAIT)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "WAIT2"     (component Wait)
   - WAIT2_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT2_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT2_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT2_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT2_Waitms -Wait for a specified time in milliseconds.
   - WAIT2_Waitus -Wait for a specified time in microseconds.
   - WAIT2_Waitns -Wait for a specified time in nano seconds.
   - WAIT2_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "CI2C1"     (component I2C_LDD)
   - CI2C1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - CI2C1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - CI2C1_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes inclusive 
                of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address must be 
                specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target slave 
                address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. The 
                state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent are 
                not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or general 
                call value. Any send or receive method directs to or from selected device, until a new slave device is selected 
                by this method. This method is available for the MASTER mode.

Module "MMA1"      (component MMA8451Q)
   - MMA1_Disable -Disables the device with clearing the ACTIVE bit in the CTRL register 1
   - MMA1_isEnabled -Returns the status of the the ACTIVE bit in the CTRL register 1
   - MMA1_SwReset -Perform a software reset using the rst bit in the CTRL register 2
   - MMA1_ReadReg8 -Reads an 8bit device register
   - MMA1_WriteReg8 -Write an 8bit device register
   - MMA1_GetX -Retrieves the value for the X axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - MMA1_GetY -Retrieves the value for the Y axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - MMA1_GetZ -Retrieves the value for the Z axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - MMA1_GetRaw8XYZ -Returns in an array the x, y and z accelerometer as 8bit values.
   - MMA1_CalibrateX1g -Performs a calibration of the sensor. It is assumed that the Y and Z sensors have 0 g, and the X sensor 
                has 1 g.
   - MMA1_CalibrateY1g -Performs a calibration of the sensor. It is assumed that the X and Z sensors have 0 g, and the Y sensor 
                has 1 g.
   - MMA1_CalibrateZ1g -Performs a calibration of the sensor. It is assumed that the X and Y sensors have 0 g, and the Z sensor 
                has 1 g.
   - MMA1_GetXmg -Returns the X value in mg
   - MMA1_GetYmg -Returns the Y value in mg
   - MMA1_GetZmg -Returns the Z value in mg
   - MMA1_MeasureGetRawX -Performs a measurement on X channel and returns the raw value.
   - MMA1_MeasureGetRawY -Performs a measurement on Y channel and returns the raw value.
   - MMA1_MeasureGetRawZ -Performs a measurement on Z channel and returns the raw value.
   - MMA1_GetXOffset -Returns the offset applied to the X value.
   - MMA1_GetYOffset -Returns the offset applied to the Y value.
   - MMA1_GetZOffset -Returns the offset applied to the Z value.
   - MMA1_GetX1gValue -Returns the value for 1g for channel  X.
   - MMA1_GetY1gValue -Returns the value for 1g for channel  Y.
   - MMA1_GetZ1gValue -Returns the value for 1g for channel  Z.
   - MMA1_SetFastMode -Turns the F_READ (Fast Read Mode) on or off
   - MMA1_WhoAmI -Returns the value of the WHO_AM_I (0x0D) register
   - MMA1_Init -Initializes the device driver
   - MMA1_Deinit -Counterpart to Init() method.

Module "GI2C1"     (component GenericI2C)
   - GI2C1_SelectSlave -Selects the slave device on the bus. Method might use a semaphore to protect bus access.
   - GI2C1_UnselectSlave -Unselects the device. Method will release a used a semaphore.
   - GI2C1_RequestBus -Starts a critical section for accessing the bus.
   - GI2C1_ReleaseBus -Finishes a critical section for accessing the bus.
   - GI2C1_WriteBlock -Write a block to the device.
   - GI2C1_ReadBlock -Read from the device a block.
   - GI2C1_ReadAddress -Read from the device. This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteAddress -Write to the device: (S+i2cAddr+0), (memAddr), (data)...(data+P)
   - GI2C1_ReadByteAddress8 -Read a byte from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteByteAddress8 -Write a byte to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ProbeACK -Accesses the bus to check if the device responds with an ACK (ACK polling).
   - GI2C1_GetSemaphore -Returns the currently allocated semaphore.
   - GI2C1_Deinit -Deinitializes the driver.
   - GI2C1_ScanDevice -Checks if a device responds on the bus with an ACK.
   - GI2C1_Init -Initializes the driver.

Module "WAIT3"     (component Wait)
   - WAIT3_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT3_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT3_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT3_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT3_Waitms -Wait for a specified time in milliseconds.
   - WAIT3_Waitus -Wait for a specified time in microseconds.
   - WAIT3_Waitns -Wait for a specified time in nano seconds.
   - WAIT3_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "WAIT4"     (component Wait)
   - WAIT4_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT4_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT4_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT4_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT4_Waitms -Wait for a specified time in milliseconds.
   - WAIT4_Waitus -Wait for a specified time in microseconds.
   - WAIT4_Waitns -Wait for a specified time in nano seconds.
   - WAIT4_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "Cpu"       (component MKE06Z128LK4)

===================================================================================
